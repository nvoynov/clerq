<%
# Template for drafts
require 'delegate'
class MarkupNode < SimpleDelegator
  def title
    '#' * nesting_level + ' ' + super
  end

  def meta
    return '' if nesting_level == 0
    return '' if super[:skip_meta]

    hsh = {id: id}.merge(super)
    hsh.delete(:order_index)
    hsh.delete(:parent)
    hsh.delete(:file_name)
    [].tap{|ary|
      ary << "Attribute | Value"
      ary << "--------- | -----"
      hsh.each{|k,v| ary << "#{k} | #{v}"}
    }.join("\n")
  end

  def body
    return '' if super.empty?
    # replace links
    txt = String.new(super)
    links.each{|l| txt.gsub!("[[#{l}]]", link(l))}
    txt
  end

  def link(id)
    r = find_node(id)
    return "[#{id}](#unknown)" unless r
    "[#{r.title}](##{url(r.id)})"
  end

  # @param [String] id Node id, when it starts with
  #   '.' it finds for first descendant by #end_with?
  #   '*' it finds first note by #end_with? from root
  # @return [Node] or nil when node not found
  def find_node(id)
    return find{|n| n.id.end_with? id[1..-1]} if id.start_with? '.'
    return root.find{|n| n.id.end_with? id[1..-1]} if id.start_with? '*'
    root.find{|n| n.id.eql? id}
  end

  def url(id)
    id.downcase
      .gsub(/[^A-Za-z0-9]{1,}/, '-')
      .gsub(/^-/, '')
      .gsub(/-$/, '')
  end

end
-%>
% <%= @object.title %>
% generated by Clerq on <%= Time.now.strftime('%B %e, %Y at %H:%M') %>

<% for @node in @object.to_a.drop(1) -%>
<%   n = MarkupNode.new(@node) -%>
<%=  [n.title, n.meta, n.body].select{|t| !t.empty?}.join("\n\n") %>

<% end %>
