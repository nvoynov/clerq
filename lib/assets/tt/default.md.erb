<%

require 'delegate'

class MarkupNode < SimpleDelegator
  def title
    s = super
    s = ".#{id.split(/\./).last}" if s.empty?
    '#' * nesting_level + ' ' + s
  end

  def meta
    return '' if nesting_level == 0
    hsh = {}.merge(super)
    hsh.delete(:parent)
    hsh.delete(:order_index)
    hsh.delete(:filename)
    return '' if hsh.empty?

    hsh.map{|k, v| "#{k}: #{v}"}
       .unshift("{{")
       .push("}}")
       .join("\n")
  end

  def markup
    [].tap do |o|
      o << title
      o << meta unless meta.empty?
      unless body.empty?
        o << "\n#{body}"
      end
    end.join("\n")
  end
end
-%>
% <%= @object.title %>
% generated by Clerq on <%= Time.now.strftime('%B %e, %Y at %H:%M') %>
% default template

<% for @node in @object.to_a.drop(1) -%>
<%   n = MarkupNode.new(@node) -%>
<%=  n.markup %>

<% end %>
